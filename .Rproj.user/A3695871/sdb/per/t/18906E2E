{
    "collab_server" : "",
    "contents" : "---\ntitle: \"SEV_NPP_initialQAQC\"\nauthor: \"AJ\"\ndate: \"10/26/2017\"\noutput: html_document\n---\n\n## Sevilleta NPP quality control\n\nThis script reads in raw excel files from NPP quad observations in the field and outputs one filled, merged, and amended file, as well as a report on possible errors within that file.  \nIn addition to the raw observation files, it utilizes a file of all previous NPP observations made at the Sevilleta.  \n\n### Initial Steps\n\n*Before going any further*: You must change the file directories within the \"read in raw data\" code chunk before this script can run!\n\n```{r}\n### Directory information\n# Where are the raw (or copies of the raw) data files stored?\nlocation_raw.data.sheets <- \"~/Desktop/test_field_crew_data/\"\n\n# Where is the large, all-quad data file stored?\nall.quad.file <- \"/Users/alesia/Documents/Project_SevPublicPlantRCode/NPP_quad_met2016.csv\"\n\n# Where is the master species list stored?\nmaster.species.list.file <- \"~/Documents/Project_SevPublicPlantRCode/SevilletaSpeciesList_AJH.csv\"\n```\n\n```{r load libraries, message=F, warning=F}\n# Load R packages that will be used\n# This list is long because Alesia is lazy \nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(plyr)\nlibrary(reshape2)\nlibrary(gridExtra)\nlibrary(cowplot)\nlibrary(knitr)\nlibrary(markdown)\nlibrary(xtable)\nlibrary(tidyr)\nlibrary(gdata)\n```\n\n\n```{r read in raw files}\n## Read in raw data files\n# For now, this script just runs on a few test files\nraw.data.sheets <- paste0(location_raw.data.sheets,\n      list.files(location_raw.data.sheets, pattern = \"npp\"))\nfor (i in 1:length(raw.data.sheets)) {\n  raw.data.file <- read.xls(raw.data.sheets[i], na.strings=c(\"\"))\n  # extract file name info\n  field.file.name <- strsplit(list.files(location_raw.data.sheets, pattern = \"npp\")[i], split = \"[.]\")[[1]]\n  raw.data.file$collection.date <- as.Date(paste(field.file.name[2], field.file.name[3], substr(field.file.name[4], start=nchar(field.file.name[4])-1, stop=nchar(field.file.name[4]))), format = \"%m %d %y\")\n  raw.data.file$collector <- as.factor(field.file.name[5])\n  if (i == 1) raw.data <- raw.data.file\n  else raw.data <- rbind(raw.data, raw.data.file)\n}\n\ncolnames(raw.data) <- c(\"site\", \"treatment\", \"quad\", \"kartez\", \"obs\", \"cover\", \"height\", \"count\", \"comments\", \"collection.date\", \"collector\")\n\n# Capitalize site and species names\nraw.data$site <- as.factor(toupper(raw.data$site))\nraw.data$kartez <- as.factor(toupper(raw.data$kartez))\nraw.data$treatment <- as.factor(toupper(raw.data$treatment))\n\n```\n\n```{r}\n# Read in all-quad data file\nall.quads <- read.csv(all.quad.file, strip.white = T)\n\n# reshape data.frame to long format\n#colnames(all.quads)\nall.quads <- gather(all.quads, key = kartez, value = NPP, 21:242)\nall.quads <- all.quads[all.quads$NPP > 0,]\n\n# reduce to columns of interest\nall.quads <- all.quads[,c(\"year\", \"site\", \"treat\", \"season\", \"web\", \"plot\", \"subplot\", \"quad_ID\", \"quad\", \"biome\", \"annual\", \"GDD\", \"SPEI12\", \"kartez\", \"NPP\")]\ncolnames(all.quads)[3] <- \"treatment\"\n\n# Possibly, read in a species list file\nmaster.species.list <- read.csv(master.species.list.file, strip.white = T)\n```\n\nIn the field, data collectors don't manually fill in every row in the Excel file, because this is a waste of time. This loop reads through each row of the data file and, if cells within the site, plot, or quad columns are empty, fills that cell with information from the previous cell.  \n\n```{r fill in blank rows}\n# Fill in blank site, plot, and quad cells\nfor (i in 1:nrow(raw.data)) {\n  if (is.na(raw.data$site[i])) raw.data$site[i] <- raw.data$site[i-1]\n  if (is.na(raw.data$treatment[i])) raw.data$treatment[i] <- raw.data$treatment[i-1]\n  if (is.na(raw.data$quad[i])) raw.data$quad[i] <- raw.data$quad[i-1]\n  if (is.na(raw.data$kartez[i])) raw.data$kartez[i] <- raw.data$kartez[i-1]\n}\n  \n```\n\nThere are some \"errors\" that can be fixed easily and without any special consideration. These include:  \n\n```{r quick fixes}\n\n```\n\nNow let's read out this new data file. \n# still an error: date formats\n\n```{r}\n# Read out data file\nwrite.out.file <- paste0(location_raw.data.sheets, \"filled_raw_data\", months(mean(raw.data$collection.date), abb=T), year(mean(raw.data$collection.date)))\nwrite.csv(raw.data, write.out.file, quote = F, row.names = F)\n\nfilled.data <- read.csv(write.out.file, strip.white = T)\nfilled.data$collection.date <- as.Date(filled.data$collection.date)\n```\n\n\n### Error report\n\nNow we can search for real errors. These errors are not fixed within this script, but simply reported. They should be evaluated by hand and corrected in the raw data or the new file, if necessary.\nThe first type of error to consider are possible typos. This code chunk will output a list of possible typos in the site, species, cover, and OTHER columns, by checking these values against a list of \"legal\" values that we provide.   \n-remember to check list of possible \"quad codes\"    \n\n\n```{r find typos, echo = F, results=\"asis\"}\n# Calculate total cover values per quad per species\nquad.totals <- ddply(filled.data, c(\"site\", \"treatment\", \"quad\", \"kartez\"), function(x) data.frame(\n  sum.cover = sum(x$cover * x$count, na.rm=T), \n  mean.cover = mean(x$cover, na.rm=T),\n  mean.height = mean(x$height, na.rm=T),\n  collector = unique(x$collector)))\n\n# Inconsistent collection dates\ncat(\"  \\n\\n Inconsistent collection dates:\")\nerrors <- unique(filled.data[is.na(filled.data$collection.date) |(filled.data$collection.date - mean(filled.data$collection.date)) > days(60), c(\"site\", \"collection.date\", \"collector\")])\n{if (nrow(errors) > 0) kable(errors)\nelse cat(\"  \\n no errors found \\n\")}\n\n# Rows with missing data\ncat(\"  \\n Rows with missing data: \\n\")\nerrors <- unique(filled.data[is.na(filled.data$site) |\n                           is.na(filled.data$treatment) |\n                           is.na(filled.data$quad) |\n                           is.na(filled.data$kartez) |\n                           is.na(filled.data$cover) |\n                           is.na(filled.data$height) |\n                             is.na(filled.data$count),\n                           c(\"site\", \"quad\", \"kartez\", \"cover\", \"height\", \"count\", \"collection.date\", \"collector\")])\n{if (nrow(errors) > 0) kable(errors)\nelse cat(\"  \\n no errors found \\n\")}\n\n# Site names in the filled.data file that don't exist in the all.quads data file\ncat(\"  \\n Site names in the filled.data file that don't exist in the all.quads data file: \\n\")\nerrors <- unique(filled.data[!filled.data$site %in% c(all.quads$site), c(\"site\", \"collection.date\", \"collector\")])\n{if (nrow(errors) > 0) kable(errors)\nelse cat(\"  \\n no errors found \\n\")}\n\n# Site-treatment combinations in the filled.data file that don't exist in the all.quads data file\ncat(\"  \\n Site-treatment combinations in the filled.data file that don't exist in the all.quads data file: \\n\")\nerrors <- unique(filled.data[!paste(filled.data$site, filled.data$treatment) %in% paste(all.quads$site, all.quads$treatment), c(\"site\", \"treatment\", \"collection.date\", \"collector\")])\n{if (nrow(errors) > 0) kable(errors)\nelse cat(\"  \\n no errors found \\n\")}\n\n# Site-quad combinations in the filled.data file that don't exist in the all.quads data file\ncat(\"  \\n Site-quad combinations in the filled.data file that don't exist in the all.quads data file: \\n\")\nerrors <- unique(filled.data[!paste(filled.data$site, filled.data$quad) %in% paste(all.quads$site, all.quads$quad), c(\"site\", \"quad\", \"collection.date\", \"collector\")]) \n{if (nrow(errors) > 0) kable(errors)\nelse cat(\"  \\n no errors found \\n\")}\n\n# Missing site-quad combinations in the filled.data file that DO exist in the all.quads data file\n### Note: This seems to print a lot of junk. Might want to give more specific list\ncat(\"  \\n Site-quad combinations in the filled.data file that don't exist in the all.quads data file: \\n\")\nerrors <- unique(all.quads[!paste(all.quads$site, all.quads$quad) %in% paste(filled.data$site, filled.data$quad), c(\"site\", \"treatment\", \"web\", \"plot\", \"quad\")]) \n{if (nrow(errors) > 0) kable(errors)\n  else cat(\"  \\n no errors found \\n\")}\n\n# Species names in the filled.data file that don't exist in the all.quads data file\ncat(\"  \\n Species names in the filled.data file that don't exist in the all.quads data file: \\n\")\nerrors <- unique(filled.data[!filled.data$kartez %in% all.quads$kartez, c(\"site\", \"kartez\", \"collection.date\", \"collector\")])\n{if (nrow(errors) > 0) kable(errors)\nelse cat(\"  \\n no errors found \\n\")}\n\n# Species names in the filled.data file that don't exist in the species file\ncat(\"  \\n Species names in the filled.data file that don't exist in the species file: \\n\")\nerrors <- unique(filled.data[!filled.data$kartez %in% master.species.list$kartez, c(\"site\", \"kartez\", \"collection.date\", \"collector\")])\n{if (nrow(errors) > 0) kable(errors)\nelse cat(\"  \\n no errors found \\n\")}\n\n# Cover values that are not in the allowed intervals\ncat(\"  \\n Cover values that are not in the allowed intervals: \\n\")\nerrors <- unique(filled.data[\n  filled.data$cover > 30 |\n    (filled.data$cover < 1 & !filled.data$cover %in% c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75)),\n  c(\"site\", \"kartez\", \"cover\", \"height\", \"collection.date\", \"collector\")])\n{if (nrow(errors) > 0) kable(errors)\nelse cat(\"  \\n no errors found \\n\")}\n\n# Count values that are not integers\ncat(\"  \\n Count values that are not integers: \\n\")\nerrors <- unique(filled.data[\n  is.na(filled.data$count) | \n    filled.data$count < 1 |\n    (filled.data$count %% 1) != 0,\n  c(\"site\", \"kartez\", \"cover\", \"height\", \"count\", \"collection.date\", \"collector\")])\n{if (nrow(errors) > 0) kable(errors)\n  else cat(\"  \\n no errors found \\n\")}\n\n# Cover values that add up to too much per quad\ncat(\"  \\n Cover values that add up to too much per quad: \\n\")\nerrors <- unique(quad.totals[quad.totals$sum.cover > 100, c(\"site\", \"treatment\")])\n{if (nrow(errors) > 0) kable(errors)\nelse cat(\"  \\n no errors found \\n\")}\n```\n\nNext, we can search for entries that are technically legal, but outside the bounds of observations commonly made. \nHighly improbable:\n- species never before seen at that site\n- species cover or height outside of 3 s.d. seen at that site-season\n- individual measurements add up to a number very different from previous year\n\nSlightly improbable:\n- species rare and never before seen at that plot or wheel\n- species outside of 1.5 s.d. seen at that site-season\n- individual measurements add up to a number slightly different that previous year, but within range of possibility\n\n```{r find possible errors}\n\n```\n\n### Data trends\n\nNow we can output some general trends.\n- species that increased/decreased in cover compared to previous years\n- species that increased/decreased in height compared to previous years\n- plots or webs that increased/decreased in total plant biomass\n- plots or webs that increased/decreased in total species diversity\n- compare observers  \n-- average height and cover per species\n-- species diversity noted (maybe a Shannon diversity value as well as a community composition figure)\n-- rank abundance curves\n\n\n\n",
    "created" : 1509059932514.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3838732831",
    "id" : "18906E2E",
    "lastKnownWriteTime" : 1509556218,
    "last_content_update" : 1509556218283,
    "path" : "~/Documents/Code/Project_SevPlantAllometries/SEV_NPP_initialQAQC.Rmd",
    "project_path" : "SEV_NPP_initialQAQC.Rmd",
    "properties" : {
        "tempName" : "Untitled3"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}