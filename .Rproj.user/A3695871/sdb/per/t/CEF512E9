{
    "collab_server" : "",
    "contents" : "---\ntitle: \"SEV_PlantBiomassRegressions_RoundOne\"\nauthor: \"AJ\"\ndate: '`r Sys.time()`'\noutput: html_document\n---\n\n##Background\nSeveral long-term studies at the Sevilleta LTER measure net primary production (NPP) across ecosystems and treatments. Net primary production is a fundamental ecological variable that quantifies rates of carbon consumption and fixation. Estimates of NPP are important in understanding energy flow at a community level as well as spatial and temporal responses to a range of ecological processes. Above-ground net primary production (ANPP) is the change in plant biomass, including loss to death and decomposition, over a given period of time. To measure this change, vegetation variables, including species composition and the cover and height of individuals, are sampled up to three times yearly (winter, spring, and fall) at permanent plots within a study site. Sevilleta LTER dataset 157 includes cover, height, and dry biomass measurements obtained through destructive harvesting. These species are always harvested from habitat comparable to the plots in which they were recorded.\n\n#### Required input files\nThe following R code requires three source files:  \n- Sev dataset 157, which includes volume (cover x height) and weight data from destructively harvested individuals. This is used to create regressions which can be used to estimate seasonal biomass for plant species across the Sevilleta.  \n- All available per-quad observations of plant volume and height from across the Sevilleta to characterize the range of plant sizes to which we are applying biomass regressions. (file from email sent from J Rudgers 12 Sept 2017)  \n- A file with species names tied to additional taxonomic and life history trait info (Alesia's personal species list used here)\n\n### Products\nThis script itself is a product. The code should be transparent and easily reproducible. \n\nThis script, when knit, creates a PDF report for every species in the Sev 157 or \"all quad\" data files. Demographic data, number of observations, and descriptions of linear models will be listed for each species, along with figures which visually describe model interactions. \nPredictor variables  include:  \n-individual plant volume (height*cover)\n-site at which plant occurs\n-season during which plant was observed\n-treatment (burned in the past 5 years or \"unburned\")\n-year during which destructive harvest sample was collected  \n\nA .csv file is created that includes linear model slopes and p-values for each pairwise comparison of the above the terms. \n\nA list of high-priority species to destructively harvest will also be created. This list will include a reason for suggested harvest and size classes for which we desire samples.\n\n```{r load.packages, include=FALSE}\n# Load R packages which will be used in this script\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(plyr)\nlibrary(reshape2)\nlibrary(gridExtra)\nlibrary(cowplot)\nlibrary(knitr)\nlibrary(markdown)\nlibrary(xtable)\nlibrary(zoo)\nlibrary(tidyr)\nlibrary(stats)\nlibrary(car)\nlibrary(nlme)\nlibrary(visreg)\n```\n\n### Step 1: Preparing the data\nSEV dataset 157 (version 20161218) is used here.\n```{r, include=F}\n# Read in SEV 157 and format columns\ndest.harv.raw <- read.csv(\"/Users/alesia/Documents/Project_SevPublicPlantRCode/sev157_nppweight_20161218.csv\", strip.white=T)\n\n# Look at the data\nsummary(dest.harv.raw)\n\n# Modify column names\nnames(dest.harv.raw)[names(dest.harv.raw) == \"Species\"] <- \"kartez\"\n\n# Convert error data to NA's\ndest.harv <- dest.harv.raw[,1:14]\ndest.harv$Treatment[dest.harv$Treatment == \"\"] <- NA\ndest.harv$Observation[dest.harv$Observation < 1] <- NA\ndest.harv$Count[is.na(dest.harv$Count)] <- 0\ndest.harv$Cover[dest.harv$Cover < 0.01 | dest.harv$Cover > 100] <- NA\ndest.harv$Height[dest.harv$Height < 1] <- NA\ndest.harv$Live_Weight[dest.harv$Live_Weight < 0.01] <- NA\ndest.harv$Live_Weight[dest.harv$Live_Weight < 0] <- NA\n\n# Calculate volume\ndest.harv$Volume <- dest.harv$Cover * dest.harv$Height\n\n# Duplicate rows with Counts greater than 1\ndest.harv.extend <- dest.harv[rep(row.names(dest.harv), dest.harv$Count), c(\"Year\", \"Season\", \"Date\", \"Site\", \"Treatment\", \"kartez\", \"Cover\", \"Height\", \"Live_Weight\", \"Volume\")]\n\n# Make a SiteCluster column\ndest.harv.extend$SiteCluster <- revalue(dest.harv.extend$Site, c(\n  \"C\" = \"L\",\n  \"G\" = \"L\",\n  \"CG\" = \"L\",\n  \"B\" = \"L\",\n  \"P\" = \"PJ\",\n  \"J\" = \"PJ\"))\n\n# Arrange by species name in alphabetical order\ndest.harv.extend <- dest.harv.extend[with(dest.harv.extend, order(kartez, Year, Season)),]\n\n```\n\nThe data look like this:\n\n```{r, echo=F}\n# The data look like this\nkable(head((dest.harv.extend), format=\"pandoc\"))\n```\n\n```{r}\n# read in all Sev quad data\nallquadNPP <- read.csv(\"/Users/alesia/Documents/Project_SevPublicPlantRCode/NPP_quad_met2016.csv\", strip.white = T)\n\n# reshape data.frame to long format\ncolnames(allquadNPP)\nallquadNPP <- gather(allquadNPP, key = kartez, value = old.NPP, 21:242)\nallquadNPP <- allquadNPP[allquadNPP$old.NPP > 0,]\n\n# reduce to columns of interest\nallquadNPP <- allquadNPP[,c(\"year\", \"site\", \"treat\", \"season\", \"web\", \"plot\", \"subplot\", \"quad_ID\", \"quad\", \"biome\", \"annual\", \"GDD\", \"SPEI12\", \"kartez\", \"old.NPP\")]\n\n#ggplot(allquadNPP[allquadNPP$kartez == unique(allquadNPP$kartez)[25] & allquadNPP$season == 3,], aes(x=log10(old.NPP), y=..count.., group=biome, fill=biome)) + geom_histogram() \n\n```\n\n```{r}\n# Read in species' taxonomy data\ntaxo <- read.csv(\"/Users/alesia/Documents/Project_SevPublicPlantRCode/SevilletaSpeciesList_AJH.csv\", strip.white = T)\n\n# Revalue a_p and g_f columns\ntaxo$a_p <- revalue(taxo$a_p, c(\n  \"a\" = \"annual\",\n  \"p\" = \"perennial\",\n  \"a/p\" = \"annual/perennial\"))\ntaxo$g_f <- revalue(taxo$g_f, c(\n  \"f\" = \"forb\",\n  \"t\" = \"tree\", \n  \"g\" = \"grass\",\n  \"s\" = \"shrub\"))\n\n# Merge taxonomy file onto other two datasets\ndest.harv.extend <- merge(dest.harv.extend, taxo[,c(\"kartez\", \"family\", \"genus\", \"species\", \"path\", \"a_p\", \"g_f\")], by=\"kartez\", all.x=T)\nallquadNPP <- merge(allquadNPP, taxo[,c(\"kartez\", \"family\", \"genus\", \"species\", \"path\", \"a_p\", \"g_f\")], by=\"kartez\", all.x=T)\n\n# Find species in the destructive harvest file that are not in the taxo file\ndest.sp.err <- unique(dest.harv.extend$kartez[!dest.harv.extend$kartez %in% taxo$kartez])\n\n# Exclude unknown species\ndest.harv.extend <- dest.harv.extend[!dest.harv.extend$kartez %in% c(\"FORB1\", \"UKFO10\", \"UKFO13\", \"UKFO17\", \"UKFO18\", \"UKFO75\", \"UKFO80\", \"UKSH5\"),]\n\n# Exclude woody species. Need to be treated separately\ndest.harv.extend <- dest.harv.extend[!dest.harv.extend$kartez %in% c(\"LATR2F\", \"LATR2L\", \"LATR2T\", \"LATR2W\", \"QUTU2B\", \"YUBAC\", \"YUBAL\"),]\n\n#dest.harv.extend[dest.harv.extend$kartez == \"MUPA\",]\n#allquadNPP[allquadNPP$kartez == \"MUPA2\",]\n\n# Correct typos\ndest.harv.extend$kartez <- revalue(dest.harv.extend$kartez, c(\n  \"CHLA2\" = \"CHAL11\", #guess based on cover/height/presence in other datasets\n  \"CHST\" = \"CHST8\", #these don't even have heights\n  \"DIW12\" = \"DIWI2\",\n  \"MUPA\" = \"MUPA2\",\n  \"SPOR\" = \"SPORO\"))\n\n# Update old species names\ndest.harv.extend$kartez <- revalue(dest.harv.extend$kartez, c(\n  \"MOSQ\" = \"MUSQ3\",\n  \"OPCL\" = \"GRCL\",\n  \"OPIM\" = \"CYIMI\",\n  \"STNE2\" = \"HENE5\"))\n\n# I don't know what these species are. exclude for now\ndest.harv.extend <- dest.harv.extend[!dest.harv.extend$kartez %in% c(\"PF3\", \"POAC6\"),]\n\n# Find species in the all quad NPP file that are not in the taxo file\nallquad.sp.err <- unique(allquadNPP$kartez[!allquadNPP$kartez %in% taxo$kartez])\n\n#unique(allquadNPP[allquadNPP$kartez == \"STEM\" &\n#                         allquadNPP$site == \"C\",])\n\n# I don't know what these species are. exclude for now\nallquadNPP <- allquadNPP[!allquadNPP$kartez %in% c(\"STEM\"),]\n```\n\n``` {r}\n# Species for which we have quad data but NO destructive measurements\nmissing.dest <- merge(unique(allquadNPP[!allquadNPP$kartez %in% dest.harv.extend$kartez, c(\"year\", \"site\", \"kartez\")]), taxo[,c(\"kartez\", \"family\", \"genus\", \"species\", \"path\", \"a_p\", \"g_f\")], by=\"kartez\", all.x=T)\n\ncat(\"  \\n\\n Species for which we have quad data but NO destructive measurements: \\n\")\nkable(unique(missing.dest[,c(\"kartez\", \"family\", \"genus\", \"species\")]), format=\"pandoc\")\n\n# Species for which we have destructive measurements but no quad data\nunused.reg <- merge(unique(dest.harv.extend[!dest.harv.extend$kartez %in% allquadNPP$kartez, c(\"Year\", \"Site\", \"kartez\")]), taxo[,c(\"kartez\", \"family\", \"genus\", \"species\", \"path\", \"a_p\", \"g_f\")], by=\"kartez\", all.x=T)\n\ncat(\"  \\n\\n Species for which we have destructive measurements but no quad data: \\n\")\nkable(unique(unused.reg[,c(\"kartez\", \"family\", \"genus\", \"species\")]), format=\"pandoc\")\n\n```\n\n```{r}\n# Create full matrix for model output\nmodel.coefs.all <- data.frame(\n  kartez = as.factor(NA), \n  Year = as.factor(NA),\n  Site = as.factor(NA), \n  Season = as.factor(NA),\n  Treatment = as.factor(NA),\n  Beta.Volume = NA,\n  SE = NA,\n  p.value = NA,\n  AdjR = NA)\n```\n\n# Species Overviews\n\n```{r, echo=F, results=\"asis\", fig.height=3.5, fig.width=8, warning=F}\n# Loop through all species\n#for (species in 1:length(unique(dest.harv.extend$kartez))) {\nfor (species in 1:5) {\n  # Create subset dataframe for that species\n  sp.sub <- unique(dest.harv.extend[dest.harv.extend$kartez ==\n                                      unique(dest.harv.extend$kartez)[species] &\n                                      !is.na(dest.harv.extend$Volume) &\n                                      !is.na(dest.harv.extend$Live_Weight),])\n\n  #### Idea: could climate effects actually be assessed by looking at the residuals from the reconstructed volume:weight relationships per year-season?!\n  \n  \n  # Print summary of species' destructive harvest data\n  kartez <- as.character(unique(sp.sub$kartez))\n  family <- as.character(unique(sp.sub$family))\n  genus <- as.character(unique(sp.sub$genus))\n  sp.epithet <- as.character(unique(sp.sub$species))\n  path <- as.character(unique(sp.sub$path))\n  a_p <- as.character(unique(sp.sub$a_p))\n  g_f <- as.character(unique(sp.sub$g_f))\n  \n  # Species:\n  cat(\"  \\n\\n### Species:\", kartez)\n  # Full taxonomy\n  cat(paste0(\"\\n ***\", genus, \" \", sp.epithet, \"*** (\", family, \") - \", a_p, \" \", path, \" \", g_f))\n  ## Destructive harvest data\n  cat(\"  \\n *Destructive Harvest Data*:\")\n  # Number of observations: \n  cat(\"  \\n Number of observations: \n      Total - \", length(sp.sub$Live_Weight), \n      \", Winter - \", length(sp.sub$Live_Weight[sp.sub$Season == 1]),\n      \", Spring - \", length(sp.sub$Live_Weight[sp.sub$Season == 2]),\n      \", Fall - \", length(sp.sub$Live_Weight[sp.sub$Season == 3]))\n  # Sites sampled: \n  Siteagg <- aggregate(sp.sub, list(sp.sub$Site), \"length\")\n  cat(\"  \\n Sites sampled:\", \n      paste(paste(Siteagg[,1], Siteagg[,2], sep=\" - \"), collapse=\", \"))\n  # Years collected: \n  Yragg <- aggregate(sp.sub, list(sp.sub$Year), \"length\")\n  cat(\"  \\n Years collected:\", \n      paste(paste(Yragg[,1], Yragg[,2], sep=\" - \"), collapse=\", \"))\n  # Burn treatments considered?\n  if(length(unique(sp.sub$Treatment)) > 1) {cat(\"  \\n Burn effects considered: Yes\")\n  } else {cat(\"  \\n Burn effects considered: No\")}\n  # Size range:   \n  cat(\"  \\n *Size range*: \n      Cover:\", min(sp.sub$Cover, na.rm=T), \" - \", max(sp.sub$Cover, na.rm=T), \n      \", Height:\", min(sp.sub$Height, na.rm=T), \" - \", max(sp.sub$Height, na.rm=T),\n      \", Volume:\", min(sp.sub$Volume, na.rm=T), \" - \", max(sp.sub$Volume, na.rm=T),\n      \"Weight:\", min(sp.sub$Live_Weight, na.rm=T), \" - \", max(sp.sub$Live_Weight, na.rm=T), \"  \\n\")\n  \n  Vol.range <- ggplot(sp.sub, aes(y=Volume, x=Year, group=Year)) + \n    geom_boxplot() +\n    geom_jitter(aes(colour=Site)) +\n    xlim(c(1989,2017))\n  Weight.range <- ggplot(sp.sub, aes(y=Live_Weight, x=Year, group=Year)) + \n    geom_boxplot() +\n    geom_jitter(aes(colour=Site)) +\n    xlim(c(1989,2017))    \n  \n  print(plot_grid(Vol.range, Weight.range, \n                  align = 'h', nrow=2, rel_widths = c(1,1)))\n  \n  # If there are fewer than 20 samples, discontinue analysis and skip to next species\n  if (length(!is.na(sp.sub$Live_Weight)) < 20) next\n  \n  # Format Season and Year columns\n  sp.sub$Season <- as.factor(sp.sub$Season)\n  sp.sub$Year <- as.factor(sp.sub$Year)\n  # Determine p-values for interaction effects in \"full model\"\n  # Here we will consider Year, Site (or SiteCluster), Season (or SeasonTwo), and Treatment\n  # In future, precip, temp, and antecedent biomass might replace Year\n  # Season Clusters or Day of Year might replace Season\n  # Years Since Burn might replace Treatment\n  \n  # Create list of covariates possible for this species\n  #cov.sub\n  all.covariates <- unique(sp.sub[,c(\"Year\", \"Season\", \"SiteCluster\", \"Treatment\")])\n  season.cov <- unique(sp.sub[,c(\"Year\", \"Season\")])\n  site.cov <- unique(sp.sub[,c(\"Year\", \"SiteCluster\")])\n  trt.cov <- unique(sp.sub[,c(\"Year\", \"Treatment\")])\n  site.trt.cov <- unique(sp.sub[,c(\"SiteCluster\", \"Treatment\")])\n  \n  \n  # Construct full.model formula\n  # Exclude covariates with limited (singular) data, as these will break gls()\n  full.model.string <- paste0(\"Live_Weight ~ 0 + Volume\",\n    # require two years\n    if (length(unique(sp.sub$Year)) > 2){\n      # require a significant Volume:Year interaction\n      if (!is.na(anova(gls(Live_Weight ~ 0 + Volume*Year, data=sp.sub, na.action = na.exclude, control=list(singular.ok=T)))[\"Volume:Year\", \"p-value\"]))\n        {\" + Volume*Year\"}},\n    # require each site to have been sampled twice\n    if (length(site.cov$SiteCluster[site.cov$SiteCluster==\"L\"]) > 1 &\n        length(site.cov$SiteCluster[site.cov$SiteCluster==\"PJ\"]) > 1 &\n        # require each site to have been sampled in overlapping years\n        sum(unique(all.covariates$Year[all.covariates$SiteCluster==\"L\"]) %in%\n        unique(all.covariates$Year[all.covariates$SiteCluster==\"PJ\"])) > 0){\n      # require a significant Volume:SiteCluster interaction\n      if (!is.na(anova(gls(Live_Weight ~ 0 + Volume*SiteCluster, data=sp.sub, na.action = na.exclude, control=list(singular.ok=T)))[\"Volume:SiteCluster\", \"p-value\"]))\n        {\" + Volume*SiteCluster\"}},\n    # require each season to have been sampled twice\n    if (length(season.cov$Season[season.cov$Season==\"1\"]) > 1 &\n        length(season.cov$Season[season.cov$Season==\"2\"]) > 1 &\n        length(season.cov$Season[season.cov$Season==\"3\"]) > 1){\n      # require a significant Volume:Season interaction\n      if (!is.na(anova(gls(Live_Weight ~ 0 + Volume*Season, data=sp.sub, na.action = na.exclude, control=list(singular.ok=T)))[\"Volume:Season\", \"p-value\"]))\n        {\" + Volume*Season\"}},\n    # require each treatment to have been sampled twice\n    if (length(trt.cov$Treatment[trt.cov$Treatment==\"C\"]) > 1 &\n        length(trt.cov$Treatment[trt.cov$Treatment==\"B\"]) > 1 &\n        # require each treatment to have been sampled in overlapping years\n        sum(unique(all.covariates$Year[all.covariates$Treatment==\"C\"]) %in%\n        unique(all.covariates$Year[all.covariates$Treatment==\"B\"])) > 0){\n      if (!is.na(anova(gls(Live_Weight ~ 0 + Volume*Treatment, data=sp.sub, na.action = na.exclude, control=list(singular.ok=T)))[\"Volume:Treatment\", \"p-value\"]))\n        {\" + Volume*Treatment\"}})\n  \n  # Create model with all significant interaction terms\n  full.model <- anova(gls(as.formula(full.model.string),\n                          data=sp.sub,\n                          na.action = na.exclude),\n                      type=\"marginal\")\n  \n  # Create concise table of significant interactions within full model\n  full.output <- data.frame(kartez = unique(sp.sub$kartez),\n    Vol.Year_p = NA, Vol.Site_p = NA, Vol.Season_p = NA, Vol.Trt_p = NA)\n  \n  full.output[,c(\"Vol.Year_p\", \"Vol.Site_p\", \"Vol.Season_p\", \"Vol.Trt_p\")] <-\n    full.model[c(\"Volume:Year\", \"Volume:SiteCluster\", \"Volume:Season\", \"Volume:Treatment\"), \"p-value\"]\n  \n  # Print full model\n  cat(\"  \\n\\n Model:\", full.model.string, \"  \\n\")\n  cat(\"  \\n - Volume main effect:\", full.model[\"Volume\", \"p-value\"])\n  cat(\"  \\n - Volume:Year interaction:\", full.output$Vol.Year_p)\n  cat(\"  \\n - Volume:Site interaction:\", full.output$Vol.Site_p)\n  cat(\"  \\n - Volume:Season interaction:\", full.output$Vol.Season_p)\n  cat(\"  \\n - Volume:Treatment interaction:\", full.output$Vol.Trt_p, \"  \\n\")\n  \n  # Plot full model\n  # Question for Jen. The v$res output holds some factors stationary and plots the residuals. So these plots only represent the residuals for one year+site+season+treatment. Is that helpful?\n  # For now, plotting raw data and residuals separately\n  \n  # Raw data plots\n  Y.fig.raw <- ggplot(data = sp.sub, aes(x = Volume, y = Live_Weight,\n                        group = Year, colour = Year, fill = Year)) +\n    theme(legend.position = \"top\") + ylim(0,max(sp.sub$Live_Weight, na.rm=T)) +\n    xlab('Volume') + ylab('Live_Weight') + guides(fill = guide_legend(nrow = 4)) +\n    geom_point(alpha=0.2, colour = \"lightgray\")\n  if (!is.na(full.output$Vol.Year_p) & full.output$Vol.Year_p < 0.05) {\n    Y.fig.raw <- Y.fig.raw + \n      geom_point(alpha=.7) + \n      stat_smooth(method=\"lm\", fullrange=T) }\n  \n  Se.fig.raw <- ggplot(data = sp.sub, aes(x = Volume, y = Live_Weight, \n                         group = Season, colour = Season, fill = Season)) +\n    theme(legend.position = \"top\", axis.title.y = element_blank(), axis.text.y = element_blank()) +\n    ylim(0,max(sp.sub$Live_Weight, na.rm=T)) +\n    xlab('Volume') + ylab('Live_Weight') + guides(fill = guide_legend(nrow = 3)) +\n    geom_point(alpha=0.2, colour=\"lightgray\")\n  if (!is.na(full.output$Vol.Season_p) & full.output$Vol.Season_p < 0.05) {\n    Se.fig.raw <- Se.fig.raw + \n      geom_point(alpha=.7) + \n      stat_smooth(method=\"lm\", fullrange=T) }\n  \n  Si.fig.raw <- ggplot(data = sp.sub, aes(x = Volume, y = Live_Weight, \n                         group = SiteCluster, colour = SiteCluster, fill = SiteCluster)) +\n    theme(legend.position = \"top\", axis.title.y = element_blank(), axis.text.y = element_blank()) +\n    ylim(0,max(sp.sub$Live_Weight, na.rm=T)) +    \n    xlab('Volume') + ylab('Live_Weight') + guides(fill = guide_legend(nrow = 2)) +\n    geom_point(alpha=0.1, colour=\"lightgray\")\n  if (!is.na(full.output$Vol.Site_p) & full.output$Vol.Site_p < 0.05) {\n    Si.fig.raw <- Si.fig.raw + \n      geom_point(alpha=.7) + \n      stat_smooth(method=\"lm\", fullrange=T) }\n  \n  T.fig.raw <- ggplot(data = sp.sub, aes(x = Volume, y = Live_Weight, \n                         group = Treatment, colour = Treatment, fill = Treatment)) +\n    theme(legend.position = \"top\", axis.title.y = element_blank(), axis.text.y = element_blank()) +\n    ylim(0,max(sp.sub$Live_Weight, na.rm=T)) + \n    xlab('Volume') + ylab('Live_Weight') + guides(fill = guide_legend(nrow = 2)) +\n    geom_point(alpha=0.1, colour=\"lightgray\")\n  if (!is.na(full.output$Vol.Trt_p) & full.output$Vol.Trt_p < 0.05) {\n    T.fig.raw <- T.fig.raw +\n      geom_point(alpha=.7) + \n      stat_smooth(method=\"lm\", fullrange=T) }\n  \n  print(plot_grid(Y.fig.raw, Se.fig.raw, Si.fig.raw, T.fig.raw, align = 'h', nrow=1, rel_widths = c(1.25,1,1,1)))\n  \n  # Residual plots\n  Y.fig.res <- ggplot(data = sp.sub, aes(x = Volume, y = Live_Weight, \n                         group = Year, colour = Year, fill = Year)) +\n    theme(legend.position = \"top\") + ylim(0,max(sp.sub$Live_Weight, na.rm=T)) +\n    xlab('Volume') + ylab('Live_Weight_resid') +\n    guides(fill = guide_legend(nrow = 4),\n           colour = guide_legend(nrow = 4)) +\n    geom_point(alpha=0, colour=\"lightgray\")\n  if (!is.na(full.output$Vol.Year_p) & full.output$Vol.Year_p < 0.05) {\n    v <- visreg(lm(full.model.string, data=sp.sub), \n                  xvar=\"Volume\", by=\"Year\", plot=F)\n    Y.fig.res <- Y.fig.res + \n      geom_point(data=v$res, aes(Volume, visregRes), alpha=.7) +\n      geom_line(data=v$fit, aes(Volume, visregFit), size=1.3) +\n      geom_ribbon(data=v$fit, aes(ymin=visregLwr, ymax=visregUpr), alpha=0.3, colour=NA) }\n  \n  Se.fig.res <- ggplot(data = sp.sub, aes(x = Volume, y = Live_Weight, \n                         group = Season, colour = Season, fill = Season)) +\n    theme(legend.position = \"top\", axis.title.y = element_blank(), axis.text.y = element_blank()) +\n    ylim(0,max(sp.sub$Live_Weight, na.rm=T)) +\n    xlab('Volume') + guides(fill = guide_legend(nrow = 3),\n                            colour = guide_legend(nrow = 3)) +\n    geom_point(alpha=0)\n  if (!is.na(full.output$Vol.Season_p) & full.output$Vol.Season_p < 0.05) {\n    v <- visreg(lm(full.model.string, data=sp.sub), xvar=\"Volume\", by=\"Season\", plot=F)\n    Se.fig.res <- Se.fig.res + \n      geom_point(data=v$res, aes(Volume, visregRes), alpha=.7) +\n      geom_line(data=v$fit, aes(Volume, visregFit), size=1.3) +\n      geom_ribbon(data=v$fit, aes(ymin=visregLwr, ymax=visregUpr), alpha=0.3, colour=NA)}\n  \n  Si.fig.res <- ggplot(data = sp.sub, aes(x = Volume, y = Live_Weight, \n                         group = SiteCluster, colour = SiteCluster, fill = SiteCluster)) +\n    theme(legend.position = \"top\", axis.title.y = element_blank(), axis.text.y = element_blank()) +\n    ylim(0,max(sp.sub$Live_Weight, na.rm=T)) +    \n    xlab('Volume') + guides(fill = guide_legend(nrow = 2),\n                            colour = guide_legend(nrow = 2)) +\n    geom_point(alpha=0)\n  if (!is.na(full.output$Vol.Site_p) & full.output$Vol.Site_p < 0.05) {\n    v <- visreg(lm(full.model.string, data=sp.sub), xvar=\"Volume\", by=\"SiteCluster\", plot=F)\n    Si.fig.res <- Si.fig.res + \n      geom_point(data=v$res, aes(Volume, visregRes), alpha=.7) +\n      geom_line(data=v$fit, aes(Volume, visregFit), size=1.3) +\n      geom_ribbon(data=v$fit, aes(ymin=visregLwr, ymax=visregUpr), alpha=0.3, colour=NA)}\n  \n  T.fig.res <- ggplot(data = sp.sub, aes(x = Volume, y = Live_Weight, \n                         group = Treatment, colour = Treatment, fill = Treatment)) +\n    theme(legend.position = \"top\", axis.title.y = element_blank(), axis.text.y = element_blank()) +\n    ylim(0,max(sp.sub$Live_Weight, na.rm=T)) + \n    xlab('Volume') + guides(fill = guide_legend(nrow = 2),\n                            colour = guide_legend(nrow = 2)) +\n    geom_point(alpha=0)\n  if (!is.na(full.output$Vol.Trt_p) & full.output$Vol.Trt_p < 0.05) {\n    v <- visreg(lm(full.model.string, data=sp.sub), xvar=\"Volume\", by=\"Treatment\", plot=F)\n    T.fig.res <- T.fig.res + \n      geom_point(data=v$res, aes(Volume, visregRes), alpha=.7) +\n      geom_line(data=v$fit, aes(Volume, visregFit), size=1.3) +\n      geom_ribbon(data=v$fit, aes(ymin=visregLwr, ymax=visregUpr), alpha=0.3, colour=NA)}\n  \n  print(plot_grid(Y.fig.res, Se.fig.res, Si.fig.res, T.fig.res, align = 'h', nrow=1, rel_widths = c(1.25,1,1,1)))\n  \n\n  # Loop through models for each combination of Year, Site, Season, and Treatment (depending on which factors had significant interaction terms in the full model)\n  model.coefs.sp <-\n    unique(sp.sub[!is.na(sp.sub$Live_Weight) & !is.na(sp.sub$Volume),\n                  c(\"kartez\", \"Year\", \"Site\", \"Season\", \"Treatment\")])\n  \n  # Select only columns for terms that were significant in model\n  if (is.na(full.output$Vol.Year_p) | full.output$Vol.Year_p > 0.05) \n    {model.coefs.sp$Year <- NULL}\n  if (is.na(full.output$Vol.Site_p) | full.output$Vol.Site_p > 0.05) \n    {model.coefs.sp$Site <- NULL}\n  if (is.na(full.output$Vol.Season_p) | full.output$Vol.Season_p > 0.05) \n    {model.coefs.sp$Season <- NULL}\n  if (is.na(full.output$Vol.Trt_p) | full.output$Vol.Trt_p > 0.05)\n    {model.coefs.sp$Treatment <- NULL}\n  \n  model.coefs.sp <- unique(model.coefs.sp)\n  sig.factors <- names(model.coefs.sp)\n  \n  # Create linear model for each line in data.frame\n  # Extract beta, SE, and Adjust R-squared from model\n  model.coefs.sp[,c(\"Beta.Volume\", \"SE\", \"p.value\", \"AdjR\")] <- NA\n  \n  for (i in 1:length(model.coefs.sp[,1])) {\n    model.coefs.sp[i, c(\"Beta.Volume\", \"SE\", \"p.value\")] <- summary(lm(\n      Live_Weight ~ 0 + Volume,\n      data=sp.sub[interaction(sp.sub[,sig.factors]) %in%\n                    interaction(model.coefs.sp[i,sig.factors]),]))$coefficients[c(1,2,4)]\n    model.coefs.sp[i, c(\"AdjR\")] <- summary(lm(\n      Live_Weight ~ 0 + Volume,\n      data=sp.sub[interaction(sp.sub[,sig.factors]) %in%\n                    interaction(model.coefs.sp[i,sig.factors]),]))$adj.r.squared\n    }\n  \n  # Merge output from this species onto all-species output matrix\n  model.coefs.all <- merge(model.coefs.all, model.coefs.sp, all=T)\n  model.coefs.all <- model.coefs.all[!is.na(model.coefs.all$kartez),]\n\n}\n\nwrite.csv(model.coefs.all, \"~/Desktop/SevPlantBiomass_29Aug17.csv\")\n```\n\n",
    "created" : 1508275190636.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3116827810",
    "id" : "CEF512E9",
    "lastKnownWriteTime" : 1509033252,
    "last_content_update" : 1509033252313,
    "path" : "~/Documents/Code/Project_SevPlantAllometries/SEVPlantBiomass_16Oct17.Rmd",
    "project_path" : "SEVPlantBiomass_16Oct17.Rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}